import { useUser, SignInButton, SignUpButton } from "@clerk/clerk-react";
import Head from "next/head";
import { api } from "~/utils/api";
import Image from "next/image";
import { LoadinPage, LoadingSpinner } from "~/components/Loading";
import { useState } from "react";
import toast from "react-hot-toast";
import { PageLayout } from "~/components/layout";
import { PostView } from "~/components/postview";
import { Button } from "@/components/ui/button";

const CreatePostWizard = () => {
  const { user } = useUser();

  const ctx = api.useContext();

  const { mutate, isLoading: isPosting } = api.posts.create.useMutation({
    onSuccess: () => {
      setInput("");
      void ctx.posts.getAll.invalidate();
    },
    onError: (e) => {
      const errorMessage = e.data?.zodError?.fieldErrors.message;
      if (errorMessage && errorMessage[0]) {
        toast.error(errorMessage[0]);
      } else {
        toast.error("Failed to post! Please try again later");
      }
    },
  });

  const [input, setInput] = useState("");

  if (!user) return null;

  return (
    <div className="flex  w-full gap-3 border-b border-zinc-600  p-4">
      <Image
        src={user.profileImageUrl}
        alt="Profile Image"
        className="h-12 w-12 rounded-full"
        width={48}
        height={48}
      />
      <textarea
        minLength={1}
        maxLength={255}
        placeholder="What is on your mind?"
        className="grow resize-none bg-transparent p-3 text-lg outline-none"
        value={input}
        onChange={(e) => setInput(e.target.value)}
        disabled={isPosting}
        onKeyDown={(e) => {
          if (e.key === "Enter") {
            e.preventDefault();
            if (input !== "") {
              mutate({ content: input });
            }
          }
        }}
      />
      <Button
        className="self-end rounded-full bg-blue-500 px-4 py-2 hover:bg-blue-400 disabled:cursor-not-allowed"
        onClick={() => mutate({ content: input })}
        disabled={isPosting || input === ""}
      >
        Tweet
      </Button>
    </div>
  );
};
const Feed = () => {
  const { data, isLoading: postsLoading } = api.posts.getAll.useQuery();

  if (postsLoading) return <LoadinPage />;

  if (!data) return <div>Something went wrong</div>;

  return (
    <div className="flex flex-col">
      {data.map((fullPost) => (
        <PostView {...fullPost} key={fullPost.post.id} />
      ))}
    </div>
  );
};

const Login = () => {
  return (
    <div className="flex  h-48 items-center justify-center border-b border-zinc-600 p-4">
      <div className="grid grid-cols-2 gap-3">
        <p className="col-span-2 text-center text-xl font-bold">
          Welcome to Twitter
        </p>
        <SignInButton mode="modal">
          <Button className="rounded-full bg-blue-500 p-2 ">Sign in</Button>
        </SignInButton>
        <SignUpButton mode="modal">
          <Button className="rounded-full bg-white p-2 text-black">
            Sign up
          </Button>
        </SignUpButton>
      </div>
    </div>
  );
};

const Navigation = () => {
  return (
    <div className="border-b border-zinc-600 p-4 text-xl font-bold">Home</div>
  );
};

export default function Home() {
  const { isLoaded: userLoaded, isSignedIn } = useUser();

  api.posts.getAll.useQuery();

  if (!userLoaded) return <div></div>;

  return (
    <>
      <Head>
        <title>Twitter</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/twitter.png" />
      </Head>
      <PageLayout>
        <Navigation />
        {!!isSignedIn ? <CreatePostWizard /> : <Login />}
        <Feed />
      </PageLayout>
    </>
  );
}
